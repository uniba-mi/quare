@prefix sh:             <http://www.w3.org/ns/shacl#> .
@prefix rdfs:           <http://www.w3.org/2000/01/rdf-schema#> .
@prefix types:          <https://example.org/repo/project-types/> .
@prefix nodeShapes:     <https://example.org/repo/node-shapes/> .
@prefix propertyShapes: <https://example.org/repo/property-shapes/> .
@prefix props:          <https://example.org/repo/props/> .
@prefix entities:       <https://example.org/repo/entities/> .
#TODO project types cannot be selected
types:FinishedResearchProject
    a           rdfs:Class, sh:NodeShape ;
    sh:property propertyShapes:PublicRepository ;
    sh:property propertyShapes:AtLeastOneTopic ;
    sh:property propertyShapes:DescriptionFilled ;
    sh:property propertyShapes:ExactlyOneBranch ;
    sh:property propertyShapes:MainBranchExistent ;
    sh:property propertyShapes:NoOpenIssues ;
    sh:property propertyShapes:AtLeastOneRelease ;
    sh:property propertyShapes:GnuGplV3License ;
    sh:property propertyShapes:ReadMeFileExistent ;
    sh:property propertyShapes:InstallationSection ;
    sh:property propertyShapes:UsageSection .

types:OngoingResearchProject
    a           rdfs:Class, sh:NodeShape ;
    sh:property propertyShapes:PrivateRepository ;
    sh:property propertyShapes:AtLeastTwoBranches .

types:TeachingTool
    a           rdfs:Class, sh:NodeShape ;
    sh:property propertyShapes:PublicRepository ;
    sh:property propertyShapes:AtLeastOneTopic ;
    sh:property propertyShapes:DescriptionFilled ;
    sh:property propertyShapes:AtLeastTwoBranches ;
    sh:property propertyShapes:AtLeastOneRelease ;
    sh:property propertyShapes:MitLicense ;
    sh:property propertyShapes:ReadMeFileExistent ;
    sh:property propertyShapes:UsageSection .

types:InternalDocumentation
    a           rdfs:Class, sh:NodeShape ;
    sh:property propertyShapes:PrivateRepository ;
    sh:property propertyShapes:DescriptionFilled ;
    sh:property propertyShapes:ReadMeFileExistent ;
    sh:property propertyShapes:PurposeSection .

types:FAIRSoftware
    a           rdfs:Class, sh:NodeShape ;

    # Best practice 1: "A description (long or short) is available"
    sh:node     nodeShapes:DescriptionOrReadme ;

    # Best practice 2: "A persistent identifier (e.g., DOI) is available"
    sh:node     nodeShapes:PersistentId ;

    # Best practice 3: "A download URL is available"
    sh:property propertyShapes:PublicRepository ;

    # Best practice 4: "A semantic versioning scheme is followed"
    sh:node     nodeShapes:SemanticVersioning ;

    # Best practice 5: "Usage documentation (including I/O) is available"
    sh:node     nodeShapes:UsageDocumentation ;

    # Best practice 6: "A license is declared"
    sh:property propertyShapes:ExactlyOneLicense ;

    # Best practice 7: "An explicit citation is provided"
    sh:node     nodeShapes:ExplicitCitation ;

    # Best practice 8: "Software metadata (programming language, keywords, etc.) is available"
    sh:property propertyShapes:AtLeastOneTopic ;

    # Best practice 9: "Installation instructions are available"
    sh:node     nodeShapes:InstallationInstructions ;

    # Best practice 10: "Software requirements are available"
    sh:node     nodeShapes:SoftwareRequirements .

nodeShapes:DescriptionOrReadme
    a     sh:NodeShape ;
    sh:or ( [ sh:property propertyShapes:ReadMeFileExistent ]
            [ sh:property propertyShapes:DescriptionFilled ] ) .

nodeShapes:ExplicitCitation
    a     sh:NodeShape ;
    sh:or ( [ sh:property propertyShapes:CitationCffFileExistent ]
            [ sh:property propertyShapes:ExactlyOneBibFile ]
            [ sh:property propertyShapes:CitationSection ] ) .

nodeShapes:InstallationInstructions
    a     sh:NodeShape ;
    sh:or ( [ sh:property propertyShapes:InstallationSection ]
            [ sh:property propertyShapes:HowToInstallSection ]
            [ sh:property propertyShapes:SetupSection ]
            [ sh:property propertyShapes:SettingUpSection ] ) .

nodeShapes:LanguageSpecificRequirementsFile
    a     sh:NodeShape ;
    sh:or (
          # In Java repositories, there has to be either a file "build.gradle" or "pom.xml" in the root directory of
          # the default branch.
          [ sh:property propertyShapes:MainLanguageJava ;
            sh:xone     ( [ sh:property propertyShapes:BuildGradleFileExistent ]
                          [ sh:property propertyShapes:PomXmlFileExistent ] ) ]

          # In JavaScript repositories, there has to be a file "package.json" in the root directory of the default branch.
          [ sh:property propertyShapes:MainLanguageJavaScript ;
            sh:property propertyShapes:PackageJsonFileExistent ]

          # In Python repositories, there has to be either a file "requirements.txt" or "environment.yaml" or
          # "environment.yml" in the root directory of the default branch.
          [ sh:property propertyShapes:MainLanguagePython ;
            sh:xone     ( [ sh:property propertyShapes:RequirementsTxtFileExistent ]
                          [ sh:property propertyShapes:EnvironmentYamlFileExistent ]
                          [ sh:property propertyShapes:EnvironmentYmlFileExistent ] ) ]

          # In TypeScript repositories, there has to be a file "package.json" in the root directory of the default branch.
          [ sh:property propertyShapes:MainLanguageTypeScript ;
            sh:property propertyShapes:PackageJsonFileExistent ] ) .

nodeShapes:PersistentId
    a     sh:NodeShape ;
    sh:or ( [ sh:property propertyShapes:AtLeastOneRelease ]
            [ sh:property propertyShapes:DoiAsHomepage ]
            [ sh:property propertyShapes:ReadMeFileWithDoi ] ) .

nodeShapes:SemanticVersioning
    a      sh:NodeShape ;
    sh:and ( [ sh:property propertyShapes:SemanticVersioningTags ]
             [ sh:property propertyShapes:ValidVersionIncrement ] ) .

nodeShapes:SoftwareRequirements
    a     sh:NodeShape ;
    sh:or ( [ sh:property propertyShapes:DependenciesSection ]
            [ sh:property propertyShapes:RequirementsSection ]
            [ sh:node nodeShapes:LanguageSpecificRequirementsFile ] ) .

nodeShapes:UsageDocumentation
    a     sh:NodeShape ;
    sh:or ( [ sh:property propertyShapes:UsageSection ]
            [ sh:property propertyShapes:HowToUseSection ]
            [ sh:property propertyShapes:ManualSection ]
            [ sh:property propertyShapes:UserManualSection ] ) .


propertyShapes:AtLeastOneRelease
    a           sh:PropertyShape ;
    # There has to be at least one release.
    sh:path     props:has_release ;
    sh:minCount 1 .

propertyShapes:AtLeastOneTopic
    a           sh:PropertyShape ;
    # There has to be at least one topic.
    sh:path     props:has_topic ;
    sh:minCount 1 .

propertyShapes:AtLeastTwoBranches
    a           sh:PropertyShape ;
    # The repository has to have at least two branches.
    sh:path     props:has_branch ;
    sh:minCount 2 .

propertyShapes:BuildGradleFileExistent
    a                      sh:PropertyShape ;
    # The file build.gradle has to exist in the root directory of the default branch.
    sh:path                ( props:has_default_branch
                             props:has_file_in_root_directory ) ; # TODO: add to repository representation
    sh:qualifiedValueShape [ sh:pattern "build.gradle" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:CitationCffFileExistent
    a                      sh:PropertyShape ;
    # The file CITATION.cff has to exist in the root directory of the default branch.
    sh:path                ( props:has_default_branch
                             props:has_file_in_root_directory ) ; # TODO: add to repository representation
    sh:qualifiedValueShape [ sh:pattern "^CITATION.cff$" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:CitationSection
    a                      sh:PropertyShape ;
    # There has to be a README file where the name of a section starts with "Citation".
    sh:path                ( props:has_readme props:has_section ) ;
    sh:qualifiedValueShape [ sh:pattern "^Citation" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:DependenciesSection
    a                      sh:PropertyShape ;
    # There has to be a README file where the name of a section starts with "Dependencies".
    sh:path                ( props:has_readme props:has_section ) ;
    sh:qualifiedValueShape [ sh:pattern "^Dependencies" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:DescriptionFilled
    a           sh:PropertyShape ;
    # There has to be exactly one description.
    sh:path     props:has_description ;
    sh:minCount 1 ;
    sh:maxCount 1 .

propertyShapes:DoiAsHomepage
    a           sh:PropertyShape ;
    # The homepage link has to exist and has to be a DOI.
    sh:path     props:has_homepage ;
    # https://www.crossref.org/blog/dois-and-matching-regular-expressions/
    # Put into the right format with the help of ChatGPT.
    sh:pattern  "^https://doi\\.org/10\\.[0-9]{4,}/[-._;()/:A-Z0-9]+$" ;
    sh:minCount 1 .

propertyShapes:EnvironmentYmlFileExistent
    a                      sh:PropertyShape ;
    # The file environment.yml has to exist in the root directory of the default branch.
    sh:path                ( props:has_default_branch
                             props:has_file_in_root_directory ) ; # TODO: add to repository representation
    sh:qualifiedValueShape [ sh:pattern "environment.yml" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:EnvironmentYamlFileExistent
    a                      sh:PropertyShape ;
    # The file environment.yaml has to exist in the root directory of the default branch.
    sh:path                ( props:has_default_branch
                             props:has_file_in_root_directory ) ; # TODO: add to repository representation
    sh:qualifiedValueShape [ sh:pattern "environment.yaml" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:ExactlyOneBibFile
    a                      sh:PropertyShape ;
    # There has to be exactly one .bib file in the root directory of the default branch.
    sh:path                ( props:has_default_branch
                             props:has_file_in_root_directory ) ; # TODO: add to repository representation
    sh:qualifiedValueShape [ sh:pattern "\\.bib$" ] ;
    sh:qualifiedMinCount   1 ;
    sh:qualifiedMaxCount   1 .

propertyShapes:ExactlyOneBranch
    a           sh:PropertyShape ;
    # There has to be exactly one branch.
    sh:path     props:has_branch ;
    sh:minCount 1 ;
    sh:maxCount 1 .

propertyShapes:ExactlyOneLicense
    a           sh:PropertyShape ;
    # There has to be exactly one license.
    sh:path     props:has_license ;
    sh:minCount 1 ;
    sh:maxCount 1 .

propertyShapes:GnuGplV3License
    a           sh:PropertyShape ;
    # There has to be a license and it has to be "GNU General Public License v3.0".
    sh:path     props:has_license ;
    sh:pattern  "GNU General Public License v3.0" ;
    sh:minCount 1 .

propertyShapes:HowToInstallSection
    a                      sh:PropertyShape ;
    # There has to be a README file where the name of a section starts with "How to install" (case insensitive).
    sh:path                ( props:has_readme props:has_section ) ;
    sh:qualifiedValueShape [ sh:pattern "^(?i)how to install" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:HowToUseSection
    a                      sh:PropertyShape ;
    # There has to be a README file where the name of a section starts with "How to use" (case insensitive).
    sh:path                ( props:has_readme props:has_section ) ;
    sh:qualifiedValueShape [ sh:pattern "^(?i)how to use" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:InstallationSection
    a                      sh:PropertyShape ;
    # There has to be a README file where the name of a section starts with "Installation".
    sh:path                ( props:has_readme props:has_section ) ;
    sh:qualifiedValueShape [ sh:pattern "^Installation" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:MainBranchExistent
    a                      sh:PropertyShape ;
    # There has to be exactly one branch named "main".
    sh:path                ( props:has_branch props:has_name ) ;
    sh:qualifiedValueShape [ sh:pattern "main" ] ;
    sh:qualifiedMinCount   1 ;
    sh:qualifiedMaxCount   1 .


propertyShapes:MainLanguageJava
    a          sh:PropertyShape ;
    # The main language has to be "Java".
    sh:path    props:has_main_language ; # TODO: add to repository representation
    sh:pattern "Java$" .

propertyShapes:MainLanguageJavaScript
    a          sh:PropertyShape ;
    # The main language has to be "JavaScript".
    sh:path    props:has_main_language ; # TODO: add to repository representation
    sh:pattern "JavaScript" .

propertyShapes:MainLanguagePython
    a          sh:PropertyShape ;
    # The main language has to be "Python".
    sh:path    props:has_main_language ; # TODO: add to repository representation
    sh:pattern "Python" .

propertyShapes:MainLanguageTypeScript
    a          sh:PropertyShape ;
    # The main language has to be "TypeScript".
    sh:path    props:has_main_language ; # TODO: add to repository representation
    sh:pattern "TypeScript" .

propertyShapes:ManualSection
    a                      sh:PropertyShape ;
    # There has to be a README file where the name of a section starts with "Manual".
    sh:path                ( props:has_readme props:has_section ) ;
    sh:qualifiedValueShape [ sh:pattern "^Manual" ] ;
    sh:qualifiedMinCount   1 ; .

propertyShapes:MitLicense
    a           sh:PropertyShape ;
    # There has to be a license and it has to be "MIT License".
    sh:path     props:has_license ;
    sh:pattern  "MIT License" ;
    sh:minCount 1 .

propertyShapes:NoOpenIssues
    a           sh:PropertyShape ;
    # There must not be any open issues.
    sh:path     ( props:has_issue props:has_state ) ;
    sh:pattern  "open" ;
    sh:maxCount 0 ; .

propertyShapes:PackageJsonFileExistent
    a                      sh:PropertyShape ;
    # The file package.json has to exist in the root directory of the default branch.
    sh:path                ( props:has_default_branch
                             props:has_file_in_root_directory ) ; # TODO: add to repository representation
    sh:qualifiedValueShape [ sh:pattern "package.json" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:PomXmlFileExistent
    a                      sh:PropertyShape ;
    # The file pom.xml has to exist in the root directory of the default branch.
    sh:path                ( props:has_default_branch
                             props:has_file_in_root_directory ) ; # TODO: add to repository representation
    sh:qualifiedValueShape [ sh:pattern "pom.xml" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:PrivateRepository
    a          sh:PropertyShape ;
    # The repository has to be private.
    sh:path    props:is_private ;
    sh:pattern "true" .

propertyShapes:PublicRepository
    a          sh:PropertyShape ;
    # The repository has to be public.
    sh:path    props:is_private ;
    sh:pattern "false" .

propertyShapes:PurposeSection
    a                      sh:PropertyShape ;
    # There has to be a README file where the name of a section starts with "Purpose".
    sh:path                ( props:has_readme props:has_section ) ;
    sh:qualifiedValueShape [ sh:pattern "^Purpose" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:ReadMeFileExistent
    a           sh:PropertyShape ;
    # There has to be at least one README file.
    sh:path     props:has_readme ;
    sh:minCount 1 .

propertyShapes:ReadMeFileWithDoi
    a           sh:PropertyShape ;
    # The README file contains a DOI link.
    sh:path     ( props:has_readme props:contains_doi ) ;
    sh:pattern  "true" ;
    sh:minCount 1 .

propertyShapes:RequirementsSection
    a                      sh:PropertyShape ;
    # There has to be a README file where the name of a section starts with "Requirements".
    sh:path                ( props:has_readme props:has_section ) ;
    sh:qualifiedValueShape [ sh:pattern "^Requirements" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:RequirementsTxtFileExistent
    a                      sh:PropertyShape ;
    # The file requirements.txt has to exist in the root directory of the default branch.
    sh:path                ( props:has_default_branch
                             props:has_file_in_root_directory ) ;
    sh:qualifiedValueShape [ sh:pattern "requirements.txt" ] ; # TODO: add to repository representation
    sh:qualifiedMinCount   1 .

propertyShapes:SemanticVersioningTags
    a       sh:PropertyShape ;
    # All tag names must match the semantic versioning pattern.
    sh:path ( props:has_release props:has_tag_name ) ;
    # Adapted from https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
    # Put into the right format with the help of ChatGPT.
    sh:pattern
            "^v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$" .

propertyShapes:SettingUpSection
    a                      sh:PropertyShape ;
    # There has to be a README file where the name of a section starts with "Setting up" (case insensitive).
    sh:path                ( props:has_readme props:has_section ) ;
    sh:qualifiedValueShape [ sh:pattern "^(?i)setting up" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:SetupSection
    a                      sh:PropertyShape ;
    # There has to be a README file where the name of a section starts with "Setup" or "Set up" (case insensitive).
    sh:path                ( props:has_readme props:has_section ) ;
    sh:qualifiedValueShape [ sh:pattern "(?i)set\\s?up" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:UsageSection
    a                      sh:PropertyShape ;
    # There has to be a README file where the name of a section starts with "Usage".
    sh:path                ( props:has_readme props:has_section ) ;
    sh:qualifiedValueShape [ sh:pattern "^Usage" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:UserManualSection
    a                      sh:PropertyShape ;
    # There has to be a README file where the name of a section starts with "User manual" (case insensitive).
    sh:path                ( props:has_readme props:has_section ) ;
    sh:qualifiedValueShape [ sh:pattern "^(?i)user manual" ] ;
    sh:qualifiedMinCount   1 .

propertyShapes:ValidVersionIncrement
    a          sh:PropertyShape ;
    # The increment/change between consecutive version numbers has to be valid.
    sh:path    props:versions_have_valid_increment ; # TODO: add to repository representation
    sh:pattern "true" .